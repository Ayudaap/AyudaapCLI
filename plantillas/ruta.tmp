package routes

import (
	"encoding/json"
	"errors"
	"net/http"

	"github.com/gorilla/mux"
	"go.mongodb.org/mongo-driver/bson/primitive"

	"Ayudaap.org/models"
	"Ayudaap.org/repository"
)

//<%nombreRepo%>Repo Modelo de <%nombreRepo%>
var <%nombreRepo%>Repo *repository.<%nombreRepo%>Repository

func init() {
	<%nombreRepo%>Repo = &repository.<%nombreRepo%>Repository{*repository.GetInstance()}
}

//GetALl<%nombreRepo%>Req Lista <%nombreRepo%>
func GetALl<%nombreRepo%>Req(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	resultados := <%nombreRepo%>Repo.GetAll<%nombreRepo%>()

	if len(resultados) <= 0 {
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(models.RespuestaGenerica{Mensaje: "No se encontraron datos a mostrar"})
	} else {
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(resultados)
	}
}

//Create<%nombreRepo%> Crea una nueva organizacion
func Create<%nombreRepo%>(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	defer r.Body.Close()

	var <%nombreMinuscula%> models.<%nombreRepo%>

	if err := json.NewDecoder(r.Body).Decode(&<%nombreMinuscula%>); err != nil {
		GetError(err, w)
		return
	}

	<%nombreMinuscula%>.ID = primitive.NewObjectID()
	<%nombreMinuscula%>.Area.ID = primitive.NewObjectID()

	<%nombreMinuscula%>Insertada := make(chan string)
	defer close(<%nombreMinuscula%>Insertada)

	idInsertado := <%nombreRepo%>Repo.Insert<%nombreRepo%>(<%nombreMinuscula%>)

	if len(idInsertado) <= 0 {
		err := errors.New("No se pudo insertar el objeto")
		GetError(err, w)
	} else {
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(struct {
			Id string `json:"id,omitempty"`
		}{Id: idInsertado})
	}
}

//Get<%nombreRepo%>ById Obtiene una <%nombreRepo%> por ID
func Get<%nombreRepo%>ById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	id := mux.Vars(r)["id"]
	resultados := <%nombreRepo%>Repo.Get<%nombreRepo%>ByID(id)

	if resultados == nil {
		json.NewEncoder(w).Encode(models.RespuestaGenerica{Mensaje: "No se encontraron datos a mostrar"})
	} else {
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(resultados)
	}
}

// Elimina un <%nombreMinuscula%>
func Delete<%nombreRepo%>(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	id := mux.Vars(r)["id"]

	resultados, err := <%nombreRepo%>Repo.Delete<%nombreRepo%>(id)
	if err != nil {
		GetError(err, w)
	} else {
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(struct {
			Procesado int `json:"procesado,omitempty"`
		}{Procesado: resultados})
	}
}

//Actualiza un objeto
func Upsert<%nombreRepo%>(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	defer r.Body.Close()

	var <%nombreMinuscula%> models.<%nombreRepo%>

	if err := json.NewDecoder(r.Body).Decode(&<%nombreMinuscula%>); err != nil {
		GetError(err, w)
	}

	resultados, err := <%nombreRepo%>Repo.Update<%nombreRepo%>(&<%nombreMinuscula%>)
	if err != nil {
		GetError(err, w)
	} else {
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(struct {
			Procesado int64 `json:"procesado,omitempty"`
		}{Procesado: resultados})
	}
}
